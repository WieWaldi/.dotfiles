" +----------------------------------------------------------------------------+
" | .vim/vimrc                                                                 |
" +----------------------------------------------------------------------------+
" | Copyright © 2020 Waldemar Schroeer                                         |
" |                  waldemar.schroeer(at)rz-amper.de                          |
" +----------------------------------------------------------------------------+

"======== Color Scheme ========================================================
" set background=light
colorscheme TheBlueOyster
" autocmd VimEnter * colorscheme TheBlueOyster

"======== Default Settings ====================================================
filetype plugin indent on                               " Respect indent rules based on file types
setlocal cm=blowfish2                                   " Sets encryption method to blowfish2
syntax on                                               " Sets syntax highlighting on
set complete+=kspell
set spellfile=~/.vim/spell/en.utf-8.add
" set path=.,,**                                          " Set path to current directory
set undodir=~/.vim/undodir                              " Write undo directory to ~/.vim/
set undofile                                            " Create undo file
set viminfo+=n~/.vim/viminfo                            " Write viminfo to ~/.vim/
set number relativenumber                               " Show hybrid line numbers
set numberwidth=5                                       " Set width of line number column
set cursorline                                          " Highlight current line
set autoindent                                          " Do autoindenting when starting a new line
set backspace=2                                         " Same as :set backspace=indent,eol,start
set incsearch                                           " Find the next match as we type the search
set ignorecase                                          " Case-insensitive search by default
set smartcase                                           " Use case-sensitive search if there is a capital letter in the search expression
set noswapfile                                          " Don't create swap files
set nobackup                                            " Don't create backup files
set ruler                                               " Show ruler on the left side
set colorcolumn=81                                      " Show color column on the right side
set list                                                " List mode
set listchars=eol:↲,tab:▸-                              " Strings to use in list mode
set fillchars+=vert:\                                   " No character for Vertical Split
set nowrap                                              " Dont wrap lines
set scrolloff=25                                        " Minimal number of screen lines to keep above and below the cursor
set sidescrolloff=7                                     " The minimal number of screen columns to keep to the left
set sidescroll=1                                        " Scroll one character at a time
set showtabline=2                                       " Always show tab line
set updatetime=100                                      " Keep me updated (see :help updatetime)
set timeoutlen=2000                                     " Wait 2 seconds for additional key strokes
set splitright                                          " New Windows from a vertical split will be put to the right
set splitbelow                                          " New Windows from a horizontal split will be put to the bottom
set laststatus=2                                        " Always show status line
set noshowmode                                          " Don't show mode on last line
set hidden                                              " Switch buffers without saving
set title                                               " Set window title
set titlestring=VIM:\ %-25.55F\ %a%r%m titlelen=70      " Format window title
set termguicolors                                       " Use gui hihglighs in the terminal
" set t_Co=256                                            " Tell the term has 256 colors
" set t_ti= t_te=                                         " Don't reset screen
" set mouse+=a                                            " Enable the use of the mouse
" set smartindent                                         " Do smart autoindenting when starting a new line
set spell spelllang=en_us                               " Language for spell checker
" set nohlsearch                                          " No hilight of search string
let g:mapleader = "\<Space>"                            " <Space> as leader
let g:maplocalleader = ','                              " , as local leader

"======== fzf =================================================================
let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Pmenu'],
      \ 'fg+':     ['fg', 'Pmenu', 'Pmenu', 'Normal'],
      \ 'bg+':     ['fg', 'PmenuSel', 'Pmenu'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" let g:fzf_colors =
"     \ { 'fg':      ['fg', 'Normal'],
"       \ 'bg':      ['bg', 'Normal'],
"       \ 'hl':      ['fg', 'Comment'],
"       \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"       \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"       \ 'hl+':     ['fg', 'Statement'],
"       \ 'info':    ['fg', 'PreProc'],
"       \ 'border':  ['fg', 'Ignore'],
"       \ 'prompt':  ['fg', 'Conditional'],
"       \ 'pointer': ['fg', 'Exception'],
"       \ 'marker':  ['fg', 'Keyword'],
"       \ 'spinner': ['fg', 'Label'],
"       \ 'header':  ['fg', 'Comment'] }

"======== NERDTree ============================================================
let NERDTreeShowHidden=1                                " Show hidden files in NERDTree

"======== IndentLine ==========================================================
let g:indentLine_color_term = 91                        " Customize conceal color
let g:indentLine_conceallevel = 2                       " indentLine will not function if conceallevel is not set to 1 or 2.
let g:indentLine_setConceal = 1                         " Keep your conceal setting, put this line to 0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

"======== Minimap =============================================================
let g:minimap_width = 8                                 " the width of the minimap window in characters
let g:minimap_auto_start = 0                            " if, set minimap will show at startup
let g:minimap_auto_start_win_enter = 0                  " if, set with g:minimap_auto_start minimap shows on WinEnter
let g:minimap_left = 0                                  " if set, minimap window will append left
let g:minimap_highlight_range = 1                       " if set, minimap will highlight range of visible lines
let g:minimap_highlight_search = 1                      " if set, minimap will highlight searched patterns
let g:minimap_git_colors = 1                            " if set, minimap will highlight range of changes as reported by git
let g:minimap_enable_highlight_colorgroup = 0           " if set, minimap will create an autocommand to set highlights on color scheme changes.

"======== Vim Table Mode ======================================================
function! s:isAtStartOfLine(mapping)
  let text_before_cursor = getline('.')[0 : col('.')-1]
  let mapping_pattern = '\V' . escape(a:mapping, '\')
  let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
  return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
endfunction

inoreabbrev <expr> <bar><bar>
          \ <SID>isAtStartOfLine('\|\|') ?
          \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
inoreabbrev <expr> __
          \ <SID>isAtStartOfLine('__') ?
          \ '<c-o>:silent! TableModeDisable<cr>' : '__'

"======== Autocommands ========================================================
" autocmd! redhat BufReadPost *
autocmd! fedora BufReadPost *
" autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
autocmd BufWritePost meeting*.adoc !./meeting.sh <afile>
autocmd BufWritePost *.sh silent !chmod +x <afile>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

augroup CursorLine                          " Toggle cursor line when changing focus
    autocmd!
    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

augroup NumberToggle                        " Toggle relative numbers on splits when changing focus
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
    autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END

augroup Templates                           " Templates and Skeletons
    autocmd!
    autocmd BufNewFile *.c 0r ~/.vim/templates/skeleton.c
    autocmd BufNewFile *.conf 0r ~/.vim/templates/skeleton.conf
    autocmd BufNewFile *.php 0r ~/.vim/templates/skeleton.php
    autocmd BufNewFile *.sh 0r ~/.vim/templates/skeleton.sh
    autocmd BufNewFile *.txt 0r ~/.vim/templates/skeleton.txt
augroup END

"======== My Mappings - Normal ================================================
nnoremap <esc><esc> :silent! nohls<cr>
nnoremap J <PageDown>zz
nnoremap K <PageUP>zz
nnoremap Q :qa!<CR>
nnoremap # :s/^/# /<CR>
nnoremap " :s/^/" /<CR>
nnoremap <Down> ddp
nnoremap <Up> ddkP
nnoremap <Left> <C-w>h
nnoremap <Right> <C-w>l
nnoremap <C-h> :tabprevious<CR>
nnoremap <C-l> :tabnext<CR>
nnoremap <C-j> :bnext!<CR>
nnoremap <C-k> :bprevious!<CR>
nnoremap <F2> :set cursorline! <CR>
nnoremap <F3> :set cursorcolumn!<CR>
nnoremap <F4> :cal ToggleAppearance()<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>gf :GFiles<CR>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>cc :ColorHighlight<CR>
nnoremap <leader>cs :cal ToggleSurround()<CR>
nnoremap <leader>cp :cal TogglePaste()<CR>
nnoremap <leader>ct :cal ToggleTab()<CR>
nnoremap <leader>cw :cal ToggleWrap()<CR>
nnoremap <leader>cf <cmd>.!figlet -f small<cr>
nnoremap <leader>q :bp<cr>:bd #<cr>
nnoremap <leader>Q :bp<cr>:bd #!<cr>
nnoremap <leader>mm :Minimap<cr>
nnoremap <leader>mr :MinimapRefresh<cr>
nnoremap <leader>mc :MinimapClose<cr>
nnoremap <leader>vim :e ~/.vim/vimrc<cr>
nnoremap <leader>hc :call popup_clear()<cr>
nnoremap <leader>hm :call MyExtShowFile('~/.vim/map')<cr>
" nnoremap <leader>b :ls<CR>:buffer <Space>

"======== My Mappings - Insert ================================================
imap <C-L> <C-X><C-L>

"======== Status Line =========================================================
let g:currentmode={
    \ "n"       : "You're in Normal Mode",
    \ "no"      : "You're in Normal Mode · Operator Pending",
    \ "v"       : "You're in Visual Mode",
    \ "V"       : "You're in V·Line Mode",
    \ "\<C-V>"  : "You're in V·Block Mode",
    \ "s"       : "You're in Select Mode",
    \ "S"       : "You're in S·Line Mode",
    \ "^S"      : "You're in S·Block Mode",
    \ "i"       : "You're in Insert Mode",
    \ "R"       : "You're in Replace Mode",
    \ "Rv"      : "You're in V·Replace Mode",
    \ "c"       : "Waiting for your Command",
    \ "cv"      : "Vim Ex",
    \ "ce"      : "Ex",
    \ "r"       : "Prompt",
    \ "rm"      : "More",
    \ "r?"      : "Confirm",
    \ "!"       : "Shell",
    \ "t"       : "Terminal"
    \}

set statusline=
set statusline+=%#StatusSegCol0#\\:\ %n\ %<%F%m%r%h%w                   " Show commitment, Buffer number, File path and attributes
set statusline+=%#StatusSepCol0#                                        " Separator 
set statusline+=%#StatusSegCol1#\\ %Y\ %{''.(&fenc!=''?&fenc:&enc).''}  " Static file icon, File Type and Encoding
set statusline+=%#StatusSepCol1#                                        " Separator 
set statusline+=%#StatusSegCol2#\ %{&ff}                              " Static file icon, Unix/DOS
set statusline+=%#StatusSepCol2#                                        " Separator 
set statusline+=%=                                                       " Right Side
set statusline+=%#StatusSepCol7#                                        " Separator 
set statusline+=%#StatusSegCol7#\ \ %02v                                " Print colomn number
set statusline+=%#StatusSepCol8#                                        " Separator 
set statusline+=%#StatusSegCol8#\ \ %02l/%L\ %3p%%                    " Print line number / total lines and percentage of document
set statusline+=%#StatusSepCol9#                                        " Separator 
set statusline+=%#StatusSegCol9#\%{toupper(g:currentmode[mode()])}       " Print the current mode

"======== EOF =================================================================
" vim:foldmethod=marker:foldlevel=0
